<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[ftp搭建]]></title>
    <url>%2F2019%2F01%2F10%2Fftp%E6%90%AD%E5%BB%BA%2F</url>
    <content type="text"><![CDATA[解决问题往往需要先复现再从中找到问题所在，在复现的同时搜集数据帮助分析问题，这是很关键的一步。有的时候为了印证自己的猜想，在代码中加入打印，去寻求解决问题的方法。有些bug的复现需要特殊的环境。很多时候需要去QA寻求帮助，借用他们的环境，这样就很不方便，延长了解决问题的时间。如果RD这里自己搭建好环境，久可以加快问题的解决。 在第一天，借用QA的光盘搭建了Ubuntu和win7的双系统，为了方便以后的不时之需，没有用Ubuntu覆盖Windows。这里使用的是Ubuntu１４，没有升级到最新的版本。计划安装ftp https dhcp. 先搭建的是FTP，搭建的过程发现在没有外网的环境下系统内是没有软件包的，后来将主机抱到实验室的外网环境下，将软件包下载完成后，按照设置要求搭建好，中途遇见权限问题，打开conf文件编写后想将其保存后，一直提醒 没有备份，确定保存改变吗 的询问，即使点是。此时依旧会继续弹出提醒，是个死循环。解决的办法就是在控制台里，用权限打开sudo gedit /etc 之类，在编辑后，你点击图形界面的保存就ok了。如果只是单纯的点击图形界面会有一些问题。以及安装好后的530login问题，我找到的原因是因为Ubuntu启用PAM，在用到vsftp时需要用到/etc/pam.d/vsftpd这个文件（源码默认不安装），因此在我关闭匿名登录权限的时候，所有用户都登陆不了。这里删除就好。sudo apt-get remove vsftpd sudo rm /etc/pam.d/vsftpd sudo apt-get install vsftpd]]></content>
      <categories>
        <category>搭建</category>
      </categories>
      <tags>
        <tag>ftp</tag>
        <tag>服务器</tag>
        <tag>Ubuntu</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[路由器模式]]></title>
    <url>%2F2019%2F01%2F08%2F%E8%B7%AF%E7%94%B1%E5%99%A8%E6%A8%A1%E5%BC%8F%2F</url>
    <content type="text"><![CDATA[1：Access Point（纯AP模式） 纯AP接入点模式，支持802.11b 11MBps或802.11b+ 22MBps的无线网卡接入 2：Wireless Client（网桥模式 ） 跟任何AP桥接的网桥模式。用Site Survey（信号搜索）把对方AP或无线路由的SSID搜索出来，然后点击Connect连接上去，就是这么简单！(工作在这个模式DWL-900AP+就不会再发射信号出来了，只会接收其他AP或无线路由的无线信号然后把无线信号转成有线信号，就象是一个用LAN口无需驱动的无线网卡一样)(无线网桥模式，适用卫星共享，XBOX PS2接入无线网络或当免驱动无线网卡给台式机使用） 3:Wireless Bridge（AP到AP无线桥接 ） 支持两个AP进行无线桥接模式来连通两个不同的局域网，设置桥接模式只要将对方AP的MAC码填进自己AP的“Wireless Bridge”项就可以了，这个模式不会再发射无线信号给其他的无线客户接收。（适合两栋建筑物之间无线通讯使用） 4：Multi-point Bridge（多AP桥接） 支持两个以上的AP进行无线桥接，将放在中心位置的AP选 “Multiple Bridge”（多AP桥接）然后其他AP统一将中心位置的AP的MAC码填进自己的“Wireless Bridge”项就可以。（适合多栋建筑物之间无线通讯使用） 5:Repeater(万能无线信号中继) 支持两台AP之间无线信号中继增强无线距离，或中继其他牌子的无线路由或AP，无论11M 22M 54M 108M都可以中继，已经测试过很多牌子的无线路由和AP，没有发现不兼容的。只要将AP置成Repeater(无线信号中继)、然后用Wireless Client项的Site Survey（信号搜索）搜索附近的AP或其他无线路由的SSID连接上去，然后把对方AP或无线路由的MAC复制到这台AP的Repeater Remote AP MAC栏就可以。只要其他AP或无线路由接上宽带，它就可以接收无线信号再把减弱了的无线信号再放大发送出去，适合距离比较远的无线客户端作信号放大使用，或用来做无线桥接然后再发射信号给无线网卡接收。 (注意！中继其他无线AP或路由时双方的Performance(无线效能值)里面的选项请都填写一样，其中的Preamble Type（前导帧模式）请选Long Preamble（长前导帧），TX Rates选 1-2-5.5-11(Mbps)兼容性会好点)]]></content>
      <categories>
        <category>路由器</category>
      </categories>
      <tags>
        <tag>路由器</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[tcpdump]]></title>
    <url>%2F2019%2F01%2F05%2Ftest2%2F</url>
    <content type="text"><![CDATA[关于tcpdump的一些应用：日常应用tcpdump -D看可以监听的端口tcpdump -i br-lan -w 名字.captftp -p -r 名字.cap 主机ip地址(连接DUT获取的ip)（提取.cap）tftp -g -r 名字.cap 主机ip地址往DUT里放文件 tcpdump [ -DenNqvX ] [ -c count ] [ -F file ] [ -i interface ] [ -r file ] [ -s snaplen ] [ -w file ] [ expression ] 抓包选项：-c：指定要抓取的包数量。注意，是最终要获取这么多个包。例如，指定”-c 10”将获取10个包，但可能已经处理了100个包，只不过只有10个包是满足条件的包。-i interface：指定tcpdump需要监听的接口。若未指定该选项，将从系统接口列表中搜寻编号最小的已配置好的接口(不包括loopback接口，要抓取loopback接口使用tcpdump -i lo)， ：一旦找到第一个符合条件的接口，搜寻马上结束。可以使用’any’关键字表示所有网络接口。-n：对地址以数字方式显式，否则显式为主机名，也就是说-n选项不做主机名解析。-nn：除了-n的作用外，还把端口显示为数值，否则显示端口服务名。-N：不打印出host的域名部分。例如tcpdump将会打印’nic’而不是’nic.ddn.mil’。-P：指定要抓取的包是流入还是流出的包。可以给定的值为”in”、”out”和”inout”，默认为”inout”。-s len：设置tcpdump的数据包抓取长度为len，如果不设置默认将会是65535字节。对于要抓取的数据包较大时，长度设置不够可能会产生包截断，若出现包截断， ：输出行中会出现”[|proto]”的标志(proto实际会显示为协议名)。但是抓取len越长，包的处理时间越长，并且会减少tcpdump可缓存的数据包的数量， ：从而会导致数据包的丢失，所以在能抓取我们想要的包的前提下，抓取长度越小越好。 输出选项：-e：输出的每行中都将包括数据链路层头部信息，例如源MAC和目标MAC。-q：快速打印输出。即打印很少的协议相关信息，从而输出行都比较简短。-X：输出包的头部数据，会以16进制和ASCII两种方式同时输出。-XX：输出包的头部数据，会以16进制和ASCII两种方式同时输出，更详细。-v：当分析和打印的时候，产生详细的输出。-vv：产生比-v更详细的输出。-vvv：产生比-vv更详细的输出。 其他功能性选项：-D：列出可用于抓包的接口。将会列出接口的数值编号和接口名，它们都可以用于”-i”后。-F：从文件中读取抓包的表达式。若使用该选项，则命令行中给定的其他表达式都将失效。-w：将抓包数据输出到文件中而不是标准输出。可以同时配合”-G time”选项使得输出文件每time秒就自动切换到另一个文件。可通过”-r”选项载入这些文件以进行分析和打印。-r：从给定的数据包文件中读取数据。使用”-“表示从标准输入中读取。]]></content>
      <categories>
        <category>test2</category>
      </categories>
      <tags>
        <tag>test2</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[test]]></title>
    <url>%2F2019%2F01%2F05%2Ftest%2F</url>
    <content type="text"></content>
      <categories>
        <category>test</category>
      </categories>
      <tags>
        <tag>test</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[tcpdump]]></title>
    <url>%2F2019%2F01%2F05%2Ftcpdump%2F</url>
    <content type="text"><![CDATA[#tcpdumptitle: tcpdumpdate: 2019-01-05 08:41:05 tags: 抓包测试关于tcpdump的一些应用：日常应用tcpdump -D看可以监听的端口tcpdump -i br-lan -w 名字.captftp -p -r 名字.cap 主机ip地址(连接DUT获取的ip)（提取.cap）tftp -g -r 名字.cap 主机ip地址往DUT里放文件 tcpdump [ -DenNqvX ] [ -c count ] [ -F file ] [ -i interface ] [ -r file ] [ -s snaplen ] [ -w file ] [ expression ] 抓包选项：-c：指定要抓取的包数量。注意，是最终要获取这么多个包。例如，指定”-c 10”将获取10个包，但可能已经处理了100个包，只不过只有10个包是满足条件的包。-i interface：指定tcpdump需要监听的接口。若未指定该选项，将从系统接口列表中搜寻编号最小的已配置好的接口(不包括loopback接口，要抓取loopback接口使用tcpdump -i lo)， ：一旦找到第一个符合条件的接口，搜寻马上结束。可以使用’any’关键字表示所有网络接口。-n：对地址以数字方式显式，否则显式为主机名，也就是说-n选项不做主机名解析。-nn：除了-n的作用外，还把端口显示为数值，否则显示端口服务名。-N：不打印出host的域名部分。例如tcpdump将会打印’nic’而不是’nic.ddn.mil’。-P：指定要抓取的包是流入还是流出的包。可以给定的值为”in”、”out”和”inout”，默认为”inout”。-s len：设置tcpdump的数据包抓取长度为len，如果不设置默认将会是65535字节。对于要抓取的数据包较大时，长度设置不够可能会产生包截断，若出现包截断， ：输出行中会出现”[|proto]”的标志(proto实际会显示为协议名)。但是抓取len越长，包的处理时间越长，并且会减少tcpdump可缓存的数据包的数量， ：从而会导致数据包的丢失，所以在能抓取我们想要的包的前提下，抓取长度越小越好。 输出选项：-e：输出的每行中都将包括数据链路层头部信息，例如源MAC和目标MAC。-q：快速打印输出。即打印很少的协议相关信息，从而输出行都比较简短。-X：输出包的头部数据，会以16进制和ASCII两种方式同时输出。-XX：输出包的头部数据，会以16进制和ASCII两种方式同时输出，更详细。-v：当分析和打印的时候，产生详细的输出。-vv：产生比-v更详细的输出。-vvv：产生比-vv更详细的输出。 其他功能性选项：-D：列出可用于抓包的接口。将会列出接口的数值编号和接口名，它们都可以用于”-i”后。-F：从文件中读取抓包的表达式。若使用该选项，则命令行中给定的其他表达式都将失效。-w：将抓包数据输出到文件中而不是标准输出。可以同时配合”-G time”选项使得输出文件每time秒就自动切换到另一个文件。可通过”-r”选项载入这些文件以进行分析和打印。-r：从给定的数据包文件中读取数据。使用”-“表示从标准输入中读取。]]></content>
  </entry>
  <entry>
    <title><![CDATA[sorry]]></title>
    <url>%2F2019%2F01%2F05%2Fsorry%E5%AF%B9%E4%B8%8D%E8%B5%B7%2F</url>
    <content type="text"><![CDATA[#sorrydate: 2019-01-05 08:05:06 tags: test2不知道说什么好，但是又得写些东西。() function fun(){ echo &quot;这是一句非常牛逼的代码&quot;; } fun(); () 这是引用的内容 这是引用的内容 这是引用的内容 这是加粗的文字这是倾斜的文字`这是斜体加粗的文字这是加删除线的文字]]></content>
  </entry>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2F2019%2F01%2F04%2Fhello-world%2F</url>
    <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new "My New Post" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment]]></content>
  </entry>
</search>
